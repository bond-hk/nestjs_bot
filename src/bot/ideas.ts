import { ContextMessageUpdate } from 'telegraf';
import Airtable from '../../lib/airtable';
import { escapeForMarkdownV2, makeMainMenuReplyMarkup, makeLoadingReplyMarkup, sendMessage } from '../../lib/utils';

async function HandleBrowseIdeas(ctx: ContextMessageUpdate) {
  const { records } = await Airtable.getAllIdeas();

  await sendMessage(ctx, makeListingPageTextContent(records), makeListingPageKeyboard(records));
}

async function HandleGetIdea(ctx: ContextMessageUpdate) {
  const parts = ctx.update.callback_query.data.split(' ');
  const ideaId = parts.length > 1 ? parts[1] : null;
  console.log('GET_IDEA with ID: ' + ideaId);

  // return idea record and action records 
  const result = await Airtable.getIdea({ id: ideaId });

  //@todo, add param lastSelectedActionId
  await sendMessage(ctx, makeDetailsPageTextContent(result.record, result.actionRecords), makeDetailsPageKeyboard(result.actionRecords));
}

async function HandleRespondIdea(ctx: ContextMessageUpdate) {
  const callbackDataParts = ctx.update.callback_query.data.split(' ');

  const selectedActionId = callbackDataParts[1];
  // console.log("ctx callback_query :");
  // console.log(ctx.update.callback_query);
  const user = ctx.update.callback_query.from;

  ctx.editMessageReplyMarkup(makeLoadingReplyMarkup());

  const { updatedIdeaRecord, updatedActionRecords, updatedRecord, userRecord } = await Airtable.makeAction({ user, selectedActionId })

  //6. Update displayed record with newly added count (use editMessage https://core.telegram.org/bots/api#editmessagetext)
  ctx.editMessageText(makeDetailsPageTextContent(updatedIdeaRecord, updatedActionRecords, selectedActionId, userRecord), {
    parse_mode: 'MarkdownV2',
    disable_web_page_preview: true,
    reply_markup: makeMainMenuReplyMarkup([[{
      text: updatedRecord && updatedRecord.fields['Action Type'] === 'Conditionally participate' ? 'ÂèÉËàáÊ¢ù‰ª∂ÊòØ‚ãØ'
        :
        (updatedRecord && updatedRecord.fields['Action Type'] === 'Downvote' ? '‰∏çÊîØÊåÅÂéüÂõ†ÊòØ‚ãØ'
          :
          'Êèê‰∫§ÂïèÈ°åÊàñÊÑèË¶ã'),
      url: `https://airtable.com/shrvE6uhIe32ydaz9?prefill_By+User=${userRecord.id}&prefill_With+Action=${selectedActionId}`,
    }]]),
  });
}


function makeIdeaStatement(ideaFields) {
  return `ÊàëÂÄëË¶Å *${escapeForMarkdownV2(ideaFields['Idea - What'])}* ÔºåÂà©Áî® *${escapeForMarkdownV2(ideaFields['Idea - How'])}* Ôºå‰ª§ *${escapeForMarkdownV2(ideaFields['Idea - Who'])}* ÂèØ‰ª• *${escapeForMarkdownV2(ideaFields['Idea - Why'])}*„ÄÇ`;
}

function makeListingPageTextContent(records) {
  const strRecords = records.reduce((acc, record, idx) => {
    const strRecord =
      `${idx + 1}\\. „Äê${escapeForMarkdownV2(record.fields['Idea Title'])}„Äë
üí™${record.fields['Participation Count']} ‰∫∫ÂèÉËàá
üìç${escapeForMarkdownV2(record.fields['Target Location'])}
${makeIdeaStatement(record.fields)}

`;
    return acc + strRecord;
  }, '');

  const fullMessage =
    `‰ªäÊúü Top Ideas
${strRecords}ÊÉ≥ÂèÉËàáÊàñÊîØÊåÅÔºüÈªûÊìä‰ª•‰∏ãÁöÑÈÄ£ÁµêÊü•ÁúãÊõ¥Â§ö„ÄÇ

‰Ω†Êúâ idea? 
/submitidea Ôºç Âá∫Ê©ãÂï¶ÔºÅ
`;

  return fullMessage;
}

function makeListingPageKeyboard(records) {
  const actionArr = records.map((record, idx) => {
    return [{
      text: `Êü•ÁúãË©≥ÊÉÖ ${idx + 1}.„Äê${escapeForMarkdownV2(record.fields['Idea Title'])}„Äë`,
      callback_data: `GET_IDEA ${record.id}`,
    }];
  });

  return {
    inline_keyboard: actionArr
  };
}

function makeDetailsPageTextContent(ideaRecord, actionRecords, selectedActionId?, userRecord?) {
  let selectedActionType;
  const strActionLines = actionRecords.reduce((acc, eachRec) => {
    const isSelected = selectedActionId === eachRec.id;
    if (isSelected) {
      selectedActionType = eachRec.fields['Action Type']
    }

    if (eachRec.fields['Action Type'] === 'Downvote') {
      return acc;
    }
    return acc + (isSelected ? '*' : '') + `\n${escapeForMarkdownV2(eachRec.fields['Action Title'])} Ôºç ${eachRec.fields['Count']} ‰∫∫` + (isSelected ? ' \\(Â∑≤ÈÅ∏\\)*' : '');
  }, '');

  const strContent =
    `„Äê${escapeForMarkdownV2(ideaRecord.fields['Idea Title'])}„Äë
üí™Â∑≤ÈõÜÂêà ${ideaRecord.fields['Participation Count']} ÂêçÂèÉËàáËÄÖ
üìç${escapeForMarkdownV2(ideaRecord.fields['Target Location'])}

${makeIdeaStatement(ideaRecord.fields)}`
    + (ideaRecord.fields['Event Date'] ? '\n\nÊó•ÊúüÔºö' + escapeForMarkdownV2(ideaRecord.fields['Event Date']) : '')
    + (ideaRecord.fields['Event Time'] ? '\nÊôÇÈñìÔºö' + escapeForMarkdownV2(ideaRecord.fields['Event Time']) : '')
    + (ideaRecord.fields['Event Location'] ? '\nÂú∞ÈªûÔºö' + escapeForMarkdownV2(ideaRecord.fields['Event Location']) : '')
    +
    `

ÂÖ±Êúâ ${ideaRecord.fields['Support Count']} ÂêçÊîØÊåÅËÄÖ${strActionLines}`
    + (ideaRecord.fields['Actions Details'] ? '\n\nüí™ÂèÉËàáË°åÂãïË©≥ÈáãÔºö\n' + escapeForMarkdownV2(ideaRecord.fields['Actions Details']) : '')
    + (ideaRecord.fields['Other Details'] ? '\n\nÂÖ∂‰ªñË©≥ÊÉÖÔºö\n' + escapeForMarkdownV2(ideaRecord.fields['Other Details']) : '')
    + (ideaRecord.fields['Future Extension'] ? '\n\nÂ∞á‰æÜÂª∂‰º∏Ôºö\n' + escapeForMarkdownV2(ideaRecord.fields['Future Extension']) : '')
    +
    '\n\n\*'
    + (!selectedActionType ? '‰Ω†Âë¢ÔºüÂπ´ÂÆöÂîîÂπ´Ôºü'
      :
      selectedActionType === 'Participate' ? 'Â§öË¨ùÂèÉËàáÔºÅÊúâÂÖ∂‰ªñÂïèÈ°åÊàñÊÑèË¶ãÔºüË´ãÂ°´form\: '
        :
        selectedActionType === 'Conditionally participate' ? 'ÂèÉËàáÊ¢ù‰ª∂ÊòØÔºüË´ãÂ°´form\: '
          :
          selectedActionType === 'Upvote' ? 'Â§öË¨ùÊîØÊåÅÔºÅË®ò‰ΩèËΩâ‰ªãÁµ¶ÊúâÈóúÊúãÂèãÂñáÔºÅ\nÊúâÂÖ∂‰ªñÂïèÈ°åÊàñÊÑèË¶ãÔºüË´ãÂ°´form\: '
            :
            'Â§öË¨ùÂõûÊáâÔºÅ‰∏çÊîØÊåÅÂéüÂõ†ÊòØÔºüË´ãÂ°´form: ')
    + '\*'
    + (selectedActionType ? escapeForMarkdownV2(`https://airtable.com/shrvE6uhIe32ydaz9?prefill_By+User=${userRecord.id}&prefill_With+Action=${selectedActionId}`) : '')
    + (selectedActionType === 'Conditionally participate' ? 'ÔºàÂ¶ÇÊûúË©≥ÊÉÖÊúâÊîπÔºåÊàëÂÄëÊúÉÈÄöÁü•‰Ω†Ôºâ' : '')
    ;


  return strContent;
}

function makeDetailsPageKeyboard(actionRecords, selectedActionId?) {
  const actionArr = actionRecords.map((eachAction) => {

    return [{
      text: eachAction.fields['Action Title'] + (eachAction.id === selectedActionId ? ' (Â∑≤ÈÅ∏Âèñ)' : ''), //@todo: mark (Â∑≤ÈÅ∏Âèñ) if already selected by user
      callback_data: `RESPOND_IDEA ${eachAction.id}`,
    }];
  });

  return { inline_keyboard: actionArr };
}

export default {
  HandleBrowseIdeas,
  HandleGetIdea,
  HandleRespondIdea,

}